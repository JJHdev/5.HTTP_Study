1. IP 프로토콜을 통해서 클라이언트 (패킷전달) --> 인터넷 (노드로 전달) --> 서버 전달을 통해서 내용 전달된다.
  -. 패킷을 받을 대상이 없거나, 서비스 불능 상태여도 패킷전송
  -. 중간에 패킷이 사라질경우
  -. 패킷이 순서대로 안올경우
  -. 같은 IP를 사용 하는 서버에서 통신하는 애플리케이션이 2개이상일 경우
   IP 프로토콜의 문제점이 생긴다.

2. TCP/UDP (IP 프로토콜의 문제점을 보완)
  -. 인터넷 프로토콜 스택의 4계층
    -. 애플리케이션 계층   - HTTP, FTP   ( 웹브라우저, 네트워크, 게임, 채팅프로그램)  Socket 라이브러리를 통해 전달 
    -. 전송계층           - TCP, UDP    (TCP 정보 생성, 메시지 데이터 포함시킴)
    -. 인터넷 계층        - IP           (IP 패킷 생성, TCP데이터에 포함)
    -. 네트워크 인터페이스 계층          이더넷프레임 생성, IP패킷 포함 (LAN카드를 통하여 -> 물리적 MAC주소를 활용 인터넷에 전달 하여 서버로 송신한다. 

  -. 패킷(택배, 소화물, 덩어리, 패키지 같은 개념)
    -. TCP/IP패킷 정보
    -. 가장 안쪽에 (전송데이터)
       그다음 바깥쪽에 TCP 세그먼트 (출발지 Port, 목적지 Port, 전송제어, 순서 ,검증정보)
       그다음 바깥쪽에 IP 패킷  (출발지 IP, 목적지 IP, 기타정보)

  -. TCP (전송 제어 프로토콜)
    -. 연길지향 (연결이 되었는지? TCP 3 way handshake (가상연결)
    -. 데이터 전달 보증   (클라이언트가 서버에 전송하면 응답이 온다)
    -. 순서 보장          
    -. 신뢰할 수 있는 프로토콜
    -. 현재는 대부분 TCP 사용

  -. TCP 3way handshake
    -. 1. SYN(클라이언트 가 서버에 SYN(신 메세지 송부) 나 연결해줘
    -. 2. SYN+ACK (서버가 클라이언트 전달) 어 나도 연결해줘
    -. 3. ACK (서버가 클라이언트에) 오케이 알았어 연결해줘
    -. 4. 데이터 전송
    -. SYN(씬) -> 나 연결해도되?? (다리 보내줘)  ,접속요청
    -. ACK(에크) -> 연결한다. (다리 역할) , 요청 수락

  -. UDP (사용자 데이터그램 프로토콜)
    -. TCP 특징이 하나도 없고 그냥 IP와 거의 같다.
    -. IP와 거의 같다. 그치만 port(하나의 IP에 여러 애플리케이션이 작동되도록 여러 포트가 있음), 체크섬(메시지가 맞는지 체크?) 정도만 추가한다.
    -. 애플리케이션에서 추가 작업 필요
    -. TCP 프로토콜은 아예 손을 못쓰지만, UDP는 하얀도화지여서 사용자정의가 된다.
    -. 

3. PORT (IP는 컴퓨터를 찾아주고, PORT는 게임, 화상통신, 인터넷, 유튜브중 어디에서 요청이 오는지 찾도록 해줌)
  -. 클라이언트에서 통신시 (출발지 IP, PORT, 도착지 IP, PORT) 를 줘서 통신한다.
  -. WEB Brower에서 통신시 서버IP에 80포트에 요청을 보내고 서버에서는 패킷을 확인하고 클라이언트의 IP와 10010포트 (예시임) 로 통신하도록 보낸다. 
  -. PORT는 0 ~ 1023은 잘 알려진 포트로 사용하지 않는 것이 좋음
  -. PORT는 0 ~ 65535 까지 할당 가능하다.
  -.  FTP( 20, 21) , TELNET(23) , HTTP(80), HTTPS(443)

4. DNS
  -. IP는 변경이 가능하다.
  -. IP는 외우기 어렵다.
  -. DNS (전화번호부)라고 생각하면 된다.
  -. DNS서버에서 도메인을 보내면 IP주소로 변환해서 준다.



    
