캐시와 조건부 요청

1. 캐시 기본 동작
  -. 캐시가 없을 경우 이미지 요청시 해당 이미지를 요청받을때마다 계속 다운로드 해야한다.
  -. cache-control: max-age=60

2. 검증 헤더와 조건부 요청1
  -. Last-Modified: 날짜 (최종 수정일을 응답으로 보낸다. > 요청으로 서버에 다시보내 변경이되었는지 아닌지 체크한다.)
  -. 웹브라우저에서는 캐시설정시간이 지났더라도 브라우저캐시(보관소)에서 Last-Modified 내용을 저장하고 서버에 요청을 보낼시 해당 내용을 서버에 보낸다. 서버에서는 해당 내용이 변경이 없을 경우 
     서버에서는 자원을 보내지 않고 304 Not Modified를 보내면서, HttpBody가 없다. 브라우저에서는 브라우저캐시에서 사용한다.
  -. 웬만한 모든 브라우저는 이 매커니즘을 사용하고 있다.

3. 검증 헤더와 조건부 요청2
  -. 검증헤더는 캐시데이터와 서버데이터가 같은지 검증하는 데이터이다.
  -. Last-Modifed, ETag 
  -. If-Modified-Since : Last-Modified 사용
    -. 데이터를 수정한 날짜가 변해도 데이터가 변하질 않는경우 한계가 있다.
  -. If-None-Match : ETag 사용
    -. 캐시용 데이터에 임의의 고유한 버전 이름을 달아둔다. (데이터를 해시암호화하여 설정해서 주고받는다. -> 해시는 데이터가 1이라도 변경되면 아예 값이 달라지고, 같은 경우 같은값이다보니 조건매칭에 좋다.)
    -. 브라우저캐시에서 ETag가 있을경우 사용한다.

4. 캐시와 조건부 요청 헤더
  -. Cache-Control: 캐시제어
    -. max-age
      -. 캐시유효 시간
    -. no-cache
      -. 데이터는 캐시해도 되지만, 항상 오리진서버에 검증하고 사용해라.
    -. no-store
      -. 데이터에 민감한  정보가 있으므로, 저장하면 안된다.

  -. Expires : 캐시만료일 지정
    -. 이것은 캐시만료일을 아예 지정하는것
    -. max-age가 초단위다 보니 더욱 유연하여 max-age를 사용하는 추세다.

5. 프록시 캐시
  -. Cache-Control: 캐시제어
    -. Cache-Control : public 
      -. 응답이 public 캐시에(프록시 캐시 서버) 저장되어도됨
    -. Cache-Control : private
      -. 응답이 해당 사용자만을 위한 것임, private 캐시에 저장해야 함 (브라우저,로컬)
    -. Cache-Control : s-maxage
      -. 프록시 캐시에만 적용되는 max-age

6. 캐시 무효화
  -. 확실하게 캐시 무효화 응답이 사용되면 안될경우 (사용자 잔고)
    -. Cache-Control:no-cache, no-store, must-revalidate
    -. Pragma: no-cache
      같이 넣어줘야 캐시가 무효화가 된다.
